{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","status","updateTitle","useState","isEditable","setEditing","title","newTitle","setNewTitle","className","classNames","completed","editing","onDoubleClick","type","onClick","id","checked","value","onChange","event","target","trim","onKeyUp","key","onBlur","TodoList","filteredTodos","map","TodosFilter","setFilter","selectedFilter","changeFilter","preventDefault","name","href","selected","App","todos","setTodos","newTodoTitle","setNewTodo","setStatus","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","completedTodos","filter","uncompletedTodos","filterTodos","All","Active","Completed","onSubmit","length","prevTodos","Date","placeholder","trimLeft","htmlFor","todoId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e35fac2c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, deleteTodo, status, updateTitle }) => {\n  const [isEditable, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const handleEditing = (event) => {\n    const { key } = event;\n\n    switch (key) {\n      case 'Enter':\n        if (newTitle) {\n          updateTitle(todo.id, newTitle);\n        } else {\n          setNewTitle(todo.title);\n        }\n\n        setEditing(false);\n        break;\n      case 'Escape':\n        setEditing(false);\n        setNewTitle(todo.title);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    if (newTitle) {\n      updateTitle(todo.id, newTitle);\n    } else {\n      setNewTitle(todo.title);\n    }\n\n    setEditing(false);\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditable },\n      )}\n      onDoubleClick={() => setEditing(!isEditable)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onClick={() => status(todo.id)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => setNewTitle(event.target.value.trim())}\n        onKeyUp={handleEditing}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  status: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  filteredTodos,\n  deleteTodo,\n  status,\n  updateTitle,\n}) => (\n\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo => (\n      <TodoItem\n        todo={todo}\n        deleteTodo={deleteTodo}\n        status={status}\n        updateTitle={updateTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  status: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({ setFilter, selectedFilter }) => {\n  const changeFilter = (event) => {\n    event.preventDefault();\n    setFilter(event.target.name);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({\n            selected: selectedFilter === 'All',\n          })}\n          name=\"All\"\n          onClick={changeFilter}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({\n            selected: selectedFilter === 'Active',\n          })}\n          name=\"Active\"\n          onClick={changeFilter}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({\n            selected: selectedFilter === 'Completed',\n          })}\n          name=\"Completed\"\n          onClick={changeFilter}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.func.isRequired,\n};","import React, { useState, useEffect } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [newTodoTitle, setNewTodo] = useState('');\n  const [status, setStatus] = useState(false);\n  const [selectedFilter, setFilter] = useState('All');\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (newTodoTitle.length > 0) {\n      setTodos(prevTodos => (\n        [...prevTodos,\n          {\n            id: +new Date(),\n            title: newTodoTitle,\n            completed: false,\n          },\n        ]\n      ));\n      setNewTodo('');\n    }\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const toggleCompletedStatus = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todoId === todo.id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const makeAllTodosComplete = () => {\n    if (status) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n\n    setStatus(!status);\n  };\n\n  const updateTitle = (id, title) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todos,\n          title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const completedTodos = todos.filter(todo => todo.completed);\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const clearCompleted = () => {\n    setTodos(uncompletedTodos);\n  };\n\n  const FILTERS = {\n    All: 'All',\n    Active: 'Active',\n    Completed: 'Completed',\n  };\n\n  // eslint-disable-next-line consistent-return\n  const filterTodos = (key) => {\n    switch (key) {\n      case 'All':\n        return todos;\n\n      case 'Active':\n        return uncompletedTodos;\n\n      case 'Completed':\n        return completedTodos;\n\n      default:\n        break;\n    }\n  };\n\n  const filteredTodos = filterTodos(FILTERS[selectedFilter]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form\n          onSubmit={handleSubmit}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={event => setNewTodo(event.target.value.trimLeft())}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={makeAllTodosComplete}\n        />\n\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          filteredTodos={filteredTodos}\n          deleteTodo={deleteTodo}\n          status={toggleCompletedStatus}\n          updateTitle={updateTitle}\n        />\n      </section>\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {uncompletedTodos.length}\n            {' '}\n            items left\n          </span>\n\n          <TodosFilter\n            setFilter={setFilter}\n            selectedFilter={selectedFilter}\n          />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}